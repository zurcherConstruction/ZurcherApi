/**
 * Script de Fix: Agregar campos faltantes a Expenses
 * 
 * Este script verifica y agrega solo los campos que faltan:
 * - supplierInvoiceItemId (falta)
 * 
 * paymentStatus y paidDate ya existen, as√≠ que los omitimos.
 */

require('dotenv').config();
const { Sequelize, DataTypes } = require('sequelize');

const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT || 5432,
    dialect: 'postgres',
    logging: false
  }
);

async function fixMissingFields() {
  try {
    console.log('\nüîß Iniciando fix de campos faltantes en Expenses...\n');

    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n establecida\n');

    const queryInterface = sequelize.getQueryInterface();

    // Verificar qu√© campos existen
    const tableDescription = await queryInterface.describeTable('Expenses');
    
    const hasPaymentStatus = !!tableDescription.paymentStatus;
    const hasPaidDate = !!tableDescription.paidDate;
    const hasSupplierInvoiceItemId = !!tableDescription.supplierInvoiceItemId;

    console.log('üìä Estado de campos:');
    console.log(`   paymentStatus: ${hasPaymentStatus ? '‚úÖ Existe' : '‚ùå Falta'}`);
    console.log(`   paidDate: ${hasPaidDate ? '‚úÖ Existe' : '‚ùå Falta'}`);
    console.log(`   supplierInvoiceItemId: ${hasSupplierInvoiceItemId ? '‚úÖ Existe' : '‚ùå Falta'}\n`);

    // Agregar campos faltantes
    if (!hasSupplierInvoiceItemId) {
      console.log('üîß Agregando campo supplierInvoiceItemId...');
      
      await queryInterface.addColumn('Expenses', 'supplierInvoiceItemId', {
        type: DataTypes.UUID,
        allowNull: true,
        references: {
          model: 'SupplierInvoiceItems',
          key: 'idItem'
        },
        onUpdate: 'CASCADE',
        onDelete: 'SET NULL',
        comment: 'Item del invoice de proveedor que pag√≥ este gasto'
      });

      console.log('‚úÖ Campo supplierInvoiceItemId agregado correctamente\n');
    }

    if (!hasPaidDate) {
      console.log('üîß Agregando campo paidDate...');
      
      await queryInterface.addColumn('Expenses', 'paidDate', {
        type: DataTypes.DATEONLY,
        allowNull: true,
        comment: 'Fecha en que se pag√≥ el gasto'
      });

      console.log('‚úÖ Campo paidDate agregado correctamente\n');
    }

    // Verificaci√≥n final
    const finalDescription = await queryInterface.describeTable('Expenses');
    
    console.log('üìä Verificaci√≥n final:');
    console.log(`   paymentStatus: ${finalDescription.paymentStatus ? '‚úÖ' : '‚ùå'}`);
    console.log(`   paidDate: ${finalDescription.paidDate ? '‚úÖ' : '‚ùå'}`);
    console.log(`   supplierInvoiceItemId: ${finalDescription.supplierInvoiceItemId ? '‚úÖ' : '‚ùå'}\n`);

    console.log('‚úÖ Fix completado exitosamente!\n');

  } catch (error) {
    console.error('\n‚ùå Error en el fix:', error.message);
    console.error(error);
  } finally {
    await sequelize.close();
    console.log('üîí Conexi√≥n cerrada\n');
  }
}

fixMissingFields();
