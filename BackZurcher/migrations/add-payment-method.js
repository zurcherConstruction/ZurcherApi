/**
 * MIGRACI√ìN: Agregar campo paymentMethod a Income y Expense
 * 
 * Este script agrega el campo 'paymentMethod' (m√©todo/cuenta de pago) 
 * a las tablas Incomes y Expenses para rastrear c√≥mo se recibi√≥ o pag√≥ el dinero.
 * 
 * Ejemplos de valores:
 * - "Zelle"
 * - "Cash"
 * - "Check #1234"
 * - "Bank Transfer - Chase"
 * - "Credit Card - Visa"
 * - "PayPal"
 * - "Wire Transfer"
 * 
 * Fecha: Octubre 2025
 */

const { QueryInterface, DataTypes } = require('sequelize');

module.exports = {
  /**
   * Ejecutar la migraci√≥n
   * @param {QueryInterface} queryInterface 
   */
  async up(queryInterface) {
    const transaction = await queryInterface.sequelize.transaction();
    
    try {
      console.log('üöÄ Iniciando migraci√≥n: Agregar campo paymentMethod...\n');

      // ============================================================
      // 1. AGREGAR paymentMethod A INCOMES
      // ============================================================
      console.log('üìù Paso 1: Verificando columna paymentMethod en Incomes...');
      
      const [incomeColumns] = await queryInterface.sequelize.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'Incomes' 
        AND column_name = 'paymentMethod';
      `, { transaction });

      if (incomeColumns.length === 0) {
        await queryInterface.addColumn('Incomes', 'paymentMethod', {
          type: DataTypes.STRING,
          allowNull: true,
          comment: 'M√©todo de pago o cuenta por la que ingres√≥ el dinero'
        }, { transaction });
        console.log('   ‚úÖ Agregada columna "paymentMethod" a Incomes');
      } else {
        console.log('   ‚è≠Ô∏è  Columna "paymentMethod" ya existe en Incomes');
      }

      // ============================================================
      // 2. AGREGAR paymentMethod A EXPENSES
      // ============================================================
      console.log('\nüìù Paso 2: Verificando columna paymentMethod en Expenses...');
      
      const [expenseColumns] = await queryInterface.sequelize.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'Expenses' 
        AND column_name = 'paymentMethod';
      `, { transaction });

      if (expenseColumns.length === 0) {
        await queryInterface.addColumn('Expenses', 'paymentMethod', {
          type: DataTypes.STRING,
          allowNull: true,
          comment: 'M√©todo de pago o cuenta por la que se realiz√≥ el gasto'
        }, { transaction });
        console.log('   ‚úÖ Agregada columna "paymentMethod" a Expenses');
      } else {
        console.log('   ‚è≠Ô∏è  Columna "paymentMethod" ya existe en Expenses');
      }

      // ============================================================
      // COMMIT DE LA TRANSACCI√ìN
      // ============================================================
      await transaction.commit();
      console.log('\n‚úÖ ¬°Migraci√≥n completada exitosamente!');
      console.log('\nüìä Resumen:');
      console.log('   ‚Ä¢ Incomes: Agregado campo "paymentMethod"');
      console.log('   ‚Ä¢ Expenses: Agregado campo "paymentMethod"');
      console.log('\nüí° Ahora puedes registrar el m√©todo de pago para cada transacci√≥n:');
      console.log('   Ejemplos: Zelle, Cash, Check #1234, Bank Transfer - Chase, etc.');
      console.log('\n‚ú® La base de datos est√° lista para rastrear m√©todos de pago.\n');

    } catch (error) {
      await transaction.rollback();
      console.error('\n‚ùå Error durante la migraci√≥n:', error);
      throw error;
    }
  },

  /**
   * Revertir la migraci√≥n
   * @param {QueryInterface} queryInterface 
   */
  async down(queryInterface) {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      console.log('‚è™ Revirtiendo migraci√≥n: Eliminar campo paymentMethod...\n');

      // ============================================================
      // ELIMINAR COLUMNAS
      // ============================================================
      console.log('üìù Eliminando columna paymentMethod de Incomes...');
      try {
        await queryInterface.removeColumn('Incomes', 'paymentMethod', { transaction });
        console.log('   ‚úÖ Eliminada columna "paymentMethod" de Incomes');
      } catch (error) {
        console.log('   ‚è≠Ô∏è  Columna "paymentMethod" no existe en Incomes');
      }

      console.log('\nüìù Eliminando columna paymentMethod de Expenses...');
      try {
        await queryInterface.removeColumn('Expenses', 'paymentMethod', { transaction });
        console.log('   ‚úÖ Eliminada columna "paymentMethod" de Expenses');
      } catch (error) {
        console.log('   ‚è≠Ô∏è  Columna "paymentMethod" no existe en Expenses');
      }

      await transaction.commit();
      console.log('\n‚úÖ Rollback completado exitosamente.\n');

    } catch (error) {
      await transaction.rollback();
      console.error('\n‚ùå Error durante el rollback:', error);
      throw error;
    }
  }
};
