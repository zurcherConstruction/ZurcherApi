const { Sequelize } = require('sequelize');

/**
 * Migraci√≥n: Agregar constraints de unicidad
 * 
 * - Permits.permitNumber: UNIQUE (genera valores √∫nicos para vac√≠os primero)
 * - Budgets.propertyAddress: UNIQUE (solo si no hay duplicados)
 */

async function up(queryInterface) {
  console.log('üìù Iniciando migraci√≥n: add-unique-constraints');
  
  const transaction = await queryInterface.sequelize.transaction();
  
  try {
    // 0. LIMPIAR DATOS: Generar permitNumber √∫nicos para los vac√≠os
    console.log('0Ô∏è‚É£ Limpiando datos: Generando permitNumber para valores vac√≠os...');
    const [emptyPermits] = await queryInterface.sequelize.query(`
      SELECT "idPermit" FROM "Permits" 
      WHERE "permitNumber" IS NULL OR "permitNumber" = '';
    `, { transaction });

    if (emptyPermits.length > 0) {
      console.log(`   Encontrados ${emptyPermits.length} permisos con permitNumber vac√≠o`);
      
      for (const permit of emptyPermits) {
        // Generar un n√∫mero √∫nico basado en timestamp y parte del UUID
        const uniqueNumber = `TEMP-${Date.now()}-${permit.idPermit.slice(0, 8)}`;
        await queryInterface.sequelize.query(`
          UPDATE "Permits" 
          SET "permitNumber" = :uniqueNumber
          WHERE "idPermit" = :permitId;
        `, { 
          replacements: { uniqueNumber, permitId: permit.idPermit },
          transaction 
        });
      }
      console.log(`   ‚úÖ ${emptyPermits.length} permitNumbers vac√≠os actualizados con valores temporales\n`);
    } else {
      console.log('   ‚úÖ No hay permitNumbers vac√≠os\n');
    }

    // 1. Agregar √≠ndice √∫nico en Permits.permitNumber
    console.log('1Ô∏è‚É£ Agregando constraint √∫nico en Permits.permitNumber...');
    await queryInterface.sequelize.query(`
      CREATE UNIQUE INDEX IF NOT EXISTS "Permits_permitNumber_unique" 
      ON "Permits"("permitNumber");
    `, { transaction });
    console.log('‚úÖ Constraint √∫nico en permitNumber creado\n');

    // 2. Verificar si hay duplicados en Budgets.propertyAddress antes de crear constraint
    console.log('2Ô∏è‚É£ Verificando duplicados en Budgets.propertyAddress...');
    const [duplicateAddresses] = await queryInterface.sequelize.query(`
      SELECT "propertyAddress", COUNT(*) as count
      FROM "Budgets"
      GROUP BY "propertyAddress"
      HAVING COUNT(*) > 1;
    `, { transaction });

    if (duplicateAddresses.length > 0) {
      console.log(`   ‚ö†Ô∏è  Encontrados ${duplicateAddresses.length} propertyAddress duplicados`);
      console.log('   ‚ÑπÔ∏è  NO se crear√° constraint √∫nico en propertyAddress (requiere limpieza manual)');
      duplicateAddresses.slice(0, 5).forEach(row => {
        console.log(`      - "${row.propertyAddress}": ${row.count} veces`);
      });
      console.log('\n');
    } else {
      console.log('   Creando constraint √∫nico en Budgets.propertyAddress...');
      await queryInterface.sequelize.query(`
        CREATE UNIQUE INDEX IF NOT EXISTS "Budgets_propertyAddress_unique" 
        ON "Budgets"("propertyAddress");
      `, { transaction });
      console.log('   ‚úÖ Constraint √∫nico en propertyAddress creado\n');
    }

    await transaction.commit();
    console.log('‚úÖ Migraci√≥n add-unique-constraints completada exitosamente!');
    return true;
  } catch (error) {
    await transaction.rollback();
    console.error('‚ùå Error en migraci√≥n add-unique-constraints:', error.message);
    throw error;
  }
}

async function down(queryInterface) {
  console.log('‚è™ Revirtiendo migraci√≥n: add-unique-constraints');
  
  const transaction = await queryInterface.sequelize.transaction();
  
  try {
    // Eliminar √≠ndices √∫nicos
    await queryInterface.sequelize.query(`
      DROP INDEX IF EXISTS "Permits_permitNumber_unique";
    `, { transaction });
    
    await queryInterface.sequelize.query(`
      DROP INDEX IF EXISTS "Budgets_propertyAddress_unique";
    `, { transaction });

    await transaction.commit();
    console.log('‚úÖ Migraci√≥n revertida exitosamente');
    return true;
  } catch (error) {
    await transaction.rollback();
    console.error('‚ùå Error revirtiendo add-unique-constraints:', error);
    throw error;
  }
}

module.exports = { up, down };
