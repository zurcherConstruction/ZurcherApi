const { Sequelize } = require('sequelize');

/**
 * Migraci√≥n: Agregar constraints de unicidad
 * 
 * - Permits.permitNumber: UNIQUE
 * - Budgets.propertyAddress + Budgets.PermitIdPermit: UNIQUE (para evitar duplicados)
 */

async function up(queryInterface) {
  console.log('üìù Iniciando migraci√≥n: add-unique-constraints');
  
  const transaction = await queryInterface.sequelize.transaction();
  
  try {
    // 1. Agregar √≠ndice √∫nico en Permits.permitNumber
    console.log('1Ô∏è‚É£ Agregando constraint √∫nico en Permits.permitNumber...');
    await queryInterface.sequelize.query(`
      CREATE UNIQUE INDEX IF NOT EXISTS "Permits_permitNumber_unique" 
      ON "Permits"("permitNumber");
    `, { transaction });
    console.log('‚úÖ Constraint √∫nico en permitNumber creado\n');

    // 2. Agregar √≠ndice √∫nico en Budgets.propertyAddress
    // Nota: Como propertyAddress puede repetirse en diferentes contextos,
    // solo lo hacemos √∫nico si es relevante para tu caso de uso
    console.log('2Ô∏è‚É£ Agregando constraint √∫nico en Budgets.propertyAddress...');
    await queryInterface.sequelize.query(`
      CREATE UNIQUE INDEX IF NOT EXISTS "Budgets_propertyAddress_unique" 
      ON "Budgets"("propertyAddress");
    `, { transaction });
    console.log('‚úÖ Constraint √∫nico en propertyAddress creado\n');

    await transaction.commit();
    console.log('‚úÖ Migraci√≥n add-unique-constraints completada exitosamente!');
    return true;
  } catch (error) {
    await transaction.rollback();
    console.error('‚ùå Error en migraci√≥n add-unique-constraints:', error);
    throw error;
  }
}

async function down(queryInterface) {
  console.log('‚è™ Revirtiendo migraci√≥n: add-unique-constraints');
  
  const transaction = await queryInterface.sequelize.transaction();
  
  try {
    // Eliminar √≠ndices √∫nicos
    await queryInterface.sequelize.query(`
      DROP INDEX IF EXISTS "Permits_permitNumber_unique";
    `, { transaction });
    
    await queryInterface.sequelize.query(`
      DROP INDEX IF EXISTS "Budgets_propertyAddress_unique";
    `, { transaction });

    await transaction.commit();
    console.log('‚úÖ Migraci√≥n revertida exitosamente');
    return true;
  } catch (error) {
    await transaction.rollback();
    console.error('‚ùå Error revirtiendo add-unique-constraints:', error);
    throw error;
  }
}

module.exports = { up, down };
