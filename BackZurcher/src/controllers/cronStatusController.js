/**
 * üîç ENDPOINT: Verificar estado del CRON de gastos fijos
 * 
 * Este endpoint permite verificar si el CRON est√° funcionando correctamente
 * en producci√≥n sin necesidad de acceder a los logs del servidor.
 * 
 * GET /api/fixed-expenses/cron-status
 * 
 * Retorna:
 * - √öltimos expenses generados autom√°ticamente
 * - Gastos fijos vencidos pendientes
 * - Pr√≥ximos gastos a vencer
 * - Estad√≠sticas de ejecuci√≥n
 */

const { FixedExpense, Expense } = require('../data');
const { Op } = require('sequelize');

/**
 * Obtener estado del CRON de gastos fijos
 */
const getCronStatus = async (req, res) => {
  try {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);
    
    const lastWeek = new Date(today);
    lastWeek.setDate(today.getDate() - 7);

    // 1. Buscar expenses auto-generados en los √∫ltimos 7 d√≠as
    const recentAutoGeneratedExpenses = await Expense.findAll({
      where: {
        typeExpense: 'Gasto Fijo',
        relatedFixedExpenseId: { [Op.ne]: null },
        date: { [Op.gte]: lastWeek },
        notes: { [Op.like]: '%Auto-generado%' }  // Los auto-generados tienen esta nota
      },
      order: [['date', 'DESC']],
      limit: 10
    });

    // 2. Buscar gastos fijos vencidos pendientes (deber√≠an procesarse pronto)
    const dueFixedExpenses = await FixedExpense.findAll({
      where: {
        isActive: true,
        autoCreateExpense: true,
        paymentStatus: 'unpaid',
        nextDueDate: { [Op.lte]: today }
      }
    });

    // 3. Gastos fijos pr√≥ximos a vencer (pr√≥ximos 7 d√≠as)
    const nextWeek = new Date(today);
    nextWeek.setDate(today.getDate() + 7);

    const upcomingFixedExpenses = await FixedExpense.findAll({
      where: {
        isActive: true,
        autoCreateExpense: true,
        nextDueDate: {
          [Op.between]: [today, nextWeek]
        }
      },
      order: [['nextDueDate', 'ASC']]
    });

    // 4. √öltimo expense auto-generado (para saber cu√°ndo fue la √∫ltima ejecuci√≥n)
    const lastAutoGeneratedExpense = await Expense.findOne({
      where: {
        typeExpense: 'Gasto Fijo',
        relatedFixedExpenseId: { [Op.ne]: null },
        notes: { [Op.like]: '%Auto-generado%' }
      },
      order: [['createdAt', 'DESC']]
    });

    // 5. Calcular estad√≠sticas
    const stats = {
      totalAutoGenerated: recentAutoGeneratedExpenses.length,
      pendingToGenerate: dueFixedExpenses.length,
      upcomingInWeek: upcomingFixedExpenses.length,
      lastExecutionDate: lastAutoGeneratedExpense ? lastAutoGeneratedExpense.createdAt : null,
      cronSchedule: '00:30 AM daily',
      serverTime: today.toISOString()
    };

    res.status(200).json({
      message: 'Estado del CRON de gastos fijos',
      status: stats,
      recentAutoGenerated: recentAutoGeneratedExpenses.map(exp => ({
        id: exp.idExpense,
        amount: exp.amount,
        date: exp.date,
        notes: exp.notes,
        createdAt: exp.createdAt,
        relatedFixedExpenseId: exp.relatedFixedExpenseId
      })),
      pendingToGenerate: dueFixedExpenses.map(fe => ({
        id: fe.idFixedExpense,
        name: fe.name,
        amount: fe.amount,
        nextDueDate: fe.nextDueDate,
        frequency: fe.frequency
      })),
      upcomingInWeek: upcomingFixedExpenses.map(fe => ({
        id: fe.idFixedExpense,
        name: fe.name,
        amount: fe.amount,
        nextDueDate: fe.nextDueDate,
        frequency: fe.frequency,
        daysUntilDue: Math.ceil((new Date(fe.nextDueDate) - today) / (1000 * 60 * 60 * 24))
      }))
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo estado del CRON:', error);
    res.status(500).json({
      error: 'Error al obtener estado del CRON',
      message: error.message
    });
  }
};

module.exports = {
  getCronStatus
};
