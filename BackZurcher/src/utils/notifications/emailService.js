const nodemailer = require('nodemailer');
require('dotenv').config();

// Configurar el transporte de Nodemailer
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: process.env.SMTP_PORT,
  secure: process.env.SMTP_SECURE === 'true', // true para el puerto 465, false para otros puertos
  auth: {
    user: process.env.SMTP_USER, // Tu correo de Gmail
    pass: process.env.SMTP_PASSWORD, // Tu contrase√±a de aplicaci√≥n
  },
  // ‚úÖ AGREGAR TIMEOUTS Y CONFIGURACIONES DE RENDIMIENTO
  connectionTimeout: 60000, // 60 segundos para conectar
  greetingTimeout: 30000,   // 30 segundos para el saludo
  socketTimeout: 60000,     // 60 segundos para inactividad
  pool: true,               // Usar pool de conexiones
  maxConnections: 5,        // M√°ximo 5 conexiones concurrentes
  maxMessages: 100,         // M√°ximo 100 mensajes por conexi√≥n
  rateDelta: 1000,          // 1 segundo entre mensajes
  rateLimit: 5              // M√°ximo 5 mensajes por rateDelta
});

// Verificar la configuraci√≥n del transporter
transporter.verify((error, success) => {
  if (error) {
    console.error('‚ùå Error al verificar la configuraci√≥n SMTP:', error);
  } else {
    console.log('‚úÖ Servidor SMTP listo para enviar correos');
  }
});

// Funci√≥n para enviar el correo
const sendEmail = async (mailOptions) => {
  const startTime = Date.now();
  try {
    // *** LOG DETALLADO ***
    console.log('üìß Iniciando env√≠o de email a:', mailOptions?.to); 
    
    if (!mailOptions || !mailOptions.to || !mailOptions.to.includes('@')) {
       console.error('‚ùå Error en sendEmail: Destinatario inv√°lido o faltante:', mailOptions?.to);
       return { success: false, error: 'Destinatario inv√°lido' }; // Retornar resultado en lugar de throw
    }

    // Aseg√∫rate de que el 'from' est√© configurado
    const optionsToSend = {
      from: `"ZURCHER CONSTRUCTION" <${process.env.SMTP_FROM || process.env.SMTP_USER}>`,
      ...mailOptions,
    };

    console.log(`üì§ Enviando email a ${optionsToSend.to} con subject: "${optionsToSend.subject}"`);

    // ‚úÖ AGREGAR TIMEOUT WRAPPER
    const sendWithTimeout = new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('Email timeout despu√©s de 45 segundos'));
      }, 45000); // 45 segundos timeout

      transporter.sendMail(optionsToSend)
        .then(result => {
          clearTimeout(timeout);
          resolve(result);
        })
        .catch(error => {
          clearTimeout(timeout);
          reject(error);
        });
    });

    const info = await sendWithTimeout;
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ Email enviado exitosamente en ${duration}ms. MessageId: ${info.messageId}`);
    return { success: true, messageId: info.messageId, duration };
    
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error(`‚ùå Error enviando email despu√©s de ${duration}ms:`, {
      error: error.message,
      to: mailOptions?.to,
      subject: mailOptions?.subject,
      stack: error.stack
    });
    
    // ‚úÖ RETORNAR ERROR EN LUGAR DE LANZARLO PARA NO ROMPER EL PROCESO
    return { 
      success: false, 
      error: error.message, 
      duration,
      to: mailOptions?.to 
    };
  }
};

module.exports = { sendEmail };