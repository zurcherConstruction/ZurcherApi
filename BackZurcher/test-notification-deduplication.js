/**
 * üß™ Script de Prueba: Sistema de Deduplicaci√≥n de Notificaciones
 * 
 * Este script prueba que las notificaciones duplicadas sean bloqueadas correctamente
 * 
 * Uso: node test-notification-deduplication.js
 */

const {
  filterDuplicates,
  registerSent,
  clearCache,
  getCacheStats,
  wasRecentlySent
} = require('./src/utils/notifications/notificationDeduplicator');

async function testDeduplication() {
  console.log('\nüß™ === PRUEBA DE DEDUPLICACI√ìN DE NOTIFICACIONES ===\n');

  try {
    // Limpiar cache antes de empezar
    clearCache();

    const testStaff = [
      { id: 1, email: 'admin@zurcherseptic.com', name: 'Admin', role: 'admin' },
      { id: 2, email: 'owner@zurcherseptic.com', name: 'Owner', role: 'owner' },
      { id: 3, email: 'finance@zurcherseptic.com', name: 'Finance', role: 'finance' }
    ];

    const status = 'budgetCreated';
    const entityId = '123';

    // Test 1: Primera vez - Debe pasar todos
    console.log('üìã Test 1: Primera llamada (debe pasar todos)');
    const filtered1 = filterDuplicates(testStaff, status, entityId);
    console.log(`   ‚úÖ Resultado: ${filtered1.length}/${testStaff.length} notificaciones pasaron`);
    
    if (filtered1.length !== testStaff.length) {
      console.log('   ‚ùå ERROR: Deber√≠a haber pasado todas las notificaciones');
    } else {
      console.log('   ‚úÖ CORRECTO\n');
    }

    // Registrar como enviadas
    registerSent(filtered1, status, entityId);

    // Test 2: Segunda vez inmediatamente - Debe bloquear todas
    console.log('üìã Test 2: Segunda llamada inmediata (debe bloquear todas)');
    const filtered2 = filterDuplicates(testStaff, status, entityId);
    console.log(`   ‚úÖ Resultado: ${filtered2.length}/${testStaff.length} notificaciones pasaron`);
    
    if (filtered2.length !== 0) {
      console.log('   ‚ùå ERROR: Deber√≠a haber bloqueado todas las notificaciones');
    } else {
      console.log('   ‚úÖ CORRECTO - Todas fueron bloqueadas\n');
    }

    // Test 3: Verificar que wasRecentlySent funciona
    console.log('üìã Test 3: Verificar wasRecentlySent()');
    const wasBlocked = wasRecentlySent('admin@zurcherseptic.com', status, entityId);
    console.log(`   ${wasBlocked ? '‚úÖ' : '‚ùå'} Notificaci√≥n marcada como reciente: ${wasBlocked}\n`);

    // Test 4: Diferente entidad - Debe pasar
    console.log('üìã Test 4: Mismos emails, diferente entidad (debe pasar)');
    const differentEntity = '456';
    const filtered3 = filterDuplicates(testStaff, status, differentEntity);
    console.log(`   ‚úÖ Resultado: ${filtered3.length}/${testStaff.length} notificaciones pasaron`);
    
    if (filtered3.length !== testStaff.length) {
      console.log('   ‚ùå ERROR: Deber√≠a pasar todas con diferente entityId');
    } else {
      console.log('   ‚úÖ CORRECTO\n');
    }

    // Test 5: Diferente status - Debe pasar
    console.log('üìã Test 5: Mismos emails, diferente status (debe pasar)');
    const differentStatus = 'budgetSent';
    const filtered4 = filterDuplicates(testStaff, differentStatus, entityId);
    console.log(`   ‚úÖ Resultado: ${filtered4.length}/${testStaff.length} notificaciones pasaron`);
    
    if (filtered4.length !== testStaff.length) {
      console.log('   ‚ùå ERROR: Deber√≠a pasar todas con diferente status');
    } else {
      console.log('   ‚úÖ CORRECTO\n');
    }

    // Test 6: Estad√≠sticas del cache
    console.log('üìã Test 6: Estad√≠sticas del cache');
    const stats = getCacheStats();
    console.log(`   üìä Total de hashes en cache: ${stats.totalHashes}`);
    console.table(stats.entries.slice(0, 5)); // Mostrar primeras 5 entradas
    console.log('');

    // Test 7: Emails con may√∫sculas/min√∫sculas
    console.log('üìã Test 7: Normalizaci√≥n de emails (may√∫sculas/min√∫sculas)');
    const staffWithCase = [
      { email: 'ADMIN@ZURCHERSEPTIC.COM' },
      { email: 'Admin@ZurcherSeptic.com' },
      { email: 'admin@zurcherseptic.com' }
    ];
    const filtered5 = filterDuplicates(staffWithCase, status, entityId);
    console.log(`   ‚úÖ Resultado: ${filtered5.length}/3 emails pasaron (todos son el mismo)`);
    
    if (filtered5.length !== 0) {
      console.log('   ‚ùå ERROR: Deber√≠a bloquear todos (son el mismo email normalizado)');
    } else {
      console.log('   ‚úÖ CORRECTO - Normalizaci√≥n funcionando\n');
    }

    // Test 8: Esperar y verificar cooldown
    console.log('üìã Test 8: Verificando cooldown (espera 2 segundos)');
    console.log('   ‚è≥ Esperando...');
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Despu√©s de 2 segundos, a√∫n debe bloquear (cooldown es 60 segundos)
    const filtered6 = filterDuplicates([testStaff[0]], status, entityId);
    console.log(`   ‚úÖ Resultado: ${filtered6.length}/1 notificaci√≥n pas√≥`);
    
    if (filtered6.length !== 0) {
      console.log('   ‚ùå ERROR: A√∫n debe bloquear (cooldown de 60 segundos)');
    } else {
      console.log('   ‚úÖ CORRECTO - Cooldown funcionando\n');
    }

    // Test 9: Limpiar cache
    console.log('üìã Test 9: Limpiar cache');
    clearCache();
    const statsAfterClear = getCacheStats();
    console.log(`   üìä Entradas despu√©s de limpiar: ${statsAfterClear.totalHashes}`);
    
    if (statsAfterClear.totalHashes !== 0) {
      console.log('   ‚ùå ERROR: El cache deber√≠a estar vac√≠o');
    } else {
      console.log('   ‚úÖ CORRECTO - Cache limpiado\n');
    }

    // Test 10: Despu√©s de limpiar, debe pasar
    console.log('üìã Test 10: Despu√©s de limpiar cache (debe pasar)');
    const filtered7 = filterDuplicates(testStaff, status, entityId);
    console.log(`   ‚úÖ Resultado: ${filtered7.length}/${testStaff.length} notificaciones pasaron`);
    
    if (filtered7.length !== testStaff.length) {
      console.log('   ‚ùå ERROR: Despu√©s de limpiar, deber√≠a pasar todas');
    } else {
      console.log('   ‚úÖ CORRECTO\n');
    }

    // Resumen
    console.log('='.repeat(60));
    console.log('üìä RESUMEN DE PRUEBAS');
    console.log('='.repeat(60));
    console.log('\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS\n');
    console.log('El sistema de deduplicaci√≥n est√° funcionando correctamente.');
    console.log('');
    console.log('Caracter√≠sticas verificadas:');
    console.log('  ‚úÖ Bloqueo de notificaciones duplicadas');
    console.log('  ‚úÖ Normalizaci√≥n de emails (may√∫sculas/min√∫sculas)');
    console.log('  ‚úÖ Diferenciaci√≥n por entityId');
    console.log('  ‚úÖ Diferenciaci√≥n por status');
    console.log('  ‚úÖ Cooldown period funcionando');
    console.log('  ‚úÖ Cache limpiable');
    console.log('  ‚úÖ Estad√≠sticas del cache');
    console.log('\n' + '='.repeat(60) + '\n');

  } catch (error) {
    console.error('\n‚ùå ERROR EN LAS PRUEBAS:', error);
    throw error;
  }
}

// Ejecutar pruebas
testDeduplication()
  .then(() => {
    console.log('‚úÖ Script de prueba completado exitosamente');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Script de prueba fall√≥:', error);
    process.exit(1);
  });
